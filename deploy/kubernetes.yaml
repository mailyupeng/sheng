apiVersion: v1
kind: Service
metadata:
  namespace: ""
  name: city-device
  labels:
    app: city-device
    role: master
    tier: backend
spec:
  ports:
  - port: 80
    targetPort: 4000
  selector:
    app: city-device
    
---

kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  namespace: ""
  name: ingress-city-device
  annotations:
    traefik.frontend.rule.type: PathPrefixStrip
    nginx.hostname.class: api
    kubernetes.io/ingress.class: traefik
spec:
  rules:
    - host: ""
      http:
        paths:
          - path: /device-manage
            backend:
              serviceName: city-device
              servicePort: 80

---

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  namespace: ""
  name: city-device
  labels:
    app: city-device
spec:
  # replicas: 3
  selector:
    matchLabels:
      app: city-device
  # 更新策略, 不用更改这里
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: city-device
    spec:
      nodeSelector:
        # 根据 node label, 指定 pod 可以调度到哪些 node
        app: ""
      imagePullSecrets:
        - name: harbor-sensoro-com
      dnsPolicy: ClusterFirst
      restartPolicy: Always
          
      containers:
        - name: city-device
          image: ""
          imagePullPolicy: Always
          # resources:
          #   requests:
          #     cpu: 800m
          #     memory: 200Mi
          #   limits:
          #     cpu: 1000m
          #     memory: 500Mi
          ports:
            - name: http
              protocol: TCP
              containerPort: 4000
          # readinessProbe、livenessProbe 为健康检查
          # 检查 conrainer 内进程是否就绪
          readinessProbe:
            tcpSocket:
              port: 4000
            # container 启动 5s 后检查 conrainer 内进程是否就绪, 这个时间将会影响到 pod 就绪的时间, 不要设置的太长
            initialDelaySeconds: 5
            periodSeconds: 5
          # 重启 container 的时间
          livenessProbe:
            tcpSocket:
              port: 4000
            # container 启动 15s 后检查 container 的就绪状态
            initialDelaySeconds: 15
            periodSeconds: 10
          command: ["node", "dist/app.js"]
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POSTGRES_URI
            valueFrom:
              secretKeyRef:
                name: secret-common-postgres
                key: deivce_uri
          - name: LOCK_REDIS_URI
            valueFrom:
              secretKeyRef:
                name: secret-upstream-redis
                key: db00_uri
          - name: CACHE_REDIS_URI
            valueFrom:
              secretKeyRef:
                name: secret-upstream-redis
                key: db01_uri
          - name: EXPIRE_REDIS_URI
            valueFrom:
              secretKeyRef:
                name: secret-upstream-redis
                key: db02_uri
          - name: KAFKA_HOST
            valueFrom:
              secretKeyRef:
                name: secret-common-kafka
                key: brokers
          - name: DEVICE_EVENT
            valueFrom:
              configMapKeyRef:
                name: configmap-common-kafka-topic
                key: device_event
          - name: DEVICE_ALARMED
            valueFrom:
              configMapKeyRef:
                name: configmap-common-kafka-topic
                key: device_alarmed
          - name: DEVICE_MALFUNCTIONED
            valueFrom:
              configMapKeyRef:
                name: configmap-common-kafka-topic
                key: device_malfunctioned
          - name: CITY_SERVICE_DEVICE
            valueFrom:
              configMapKeyRef:
                name: configmap-common-kafka-topic
                key: city_service_device
          - name: CITY_SERVICE_SCANNER
            valueFrom:
              configMapKeyRef:
                name: configmap-common-kafka-topic
                key: city_service_scanner
          - name: STATION_EVENT
            valueFrom:
              configMapKeyRef:
                name: configmap-common-kafka-topic
                key: station_event
          - name: SENSOR_UPSTREAM
            valueFrom:
              configMapKeyRef:
                name: configmap-common-kafka-topic
                key: sensor_upstream
          - name: NODE_CONFIG
            valueFrom:
              configMapKeyRef:
                name: configmap-city-device
                key: json
          - name: BASIC_AUTH_NAME
            valueFrom:
              secretKeyRef:
                name: secret-notification
                key: authName
          - name: BASIC_AUTH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: secret-notification
                key: authPass
